extends layout

block content
  meta(http-equiv='refresh', content='0.5')

  if(regles.dateDebut)
    h1 En cours d'exécution...
      | &nbsp;
      a.btn.btn-info(href='/arret') Arrêter la partie
    span.glyphicon.glyphicon-time
    | &nbsp;Date de début : #{regles.dateDebut}
  else
    h1 Préparation du jeu 2/2 - Inscription des agents
      | &nbsp;
      a.btn.btn-info(href='/annulation') Revenir au paramétrage des règles et des agents


  if nJoueurs == 0 && nProducteurs == 0
    #graphique(style="width: 800px; height: 500px;")
      script.
        console.log(data);
        var dt= !{JSON.stringify(data)};
        var i;
        var tab=[];
        var tab2= [];
        for(i=0; i<dt.length; i++)
        {
          tab2.push([]);
          for(var j=0; j<dt[i].ressources.length; j++)
          {
            tab.push(dt[i].date);
            tab2[j][i] = (dt[i].ressources[j]);
          }
        }
        console.log(tab2);
        var trace1 = {
          x: tab,
          y: tab2[0],
          type: 'scatter'
        };
        var data = [trace1];
        Plotly.newPlot('graphique', data);

  if nJoueurs != 0 || nProducteurs != 0
    h2 #{nJoueurs} joueur(s) en attente
    table.table.table-bordered
      tr
        th Adresse IP
        th Port
        th Stratégie
      - var i = 0
      while i < regles.joueurs.length
        if regles.joueurs[i].inscription
          tr.success
            td #{regles.joueurs[i].ip}
            td #{regles.joueurs[i].port}
            td #{regles.joueurs[i].strategie}
        else
          tr.danger
            td #{regles.joueurs[i].ip}
            td #{regles.joueurs[i].port}
            td /

        - i = i + 1

    h2 #{nProducteurs} producteur(s) en attente
    table.table.table-bordered
      tr
        th Adresse IP
        th Port
        th Ressource
        th Quantité initiale
        th Quantité produite
      - var i = 0
      while i < regles.producteurs.length
        if regles.producteurs[i].inscription
          tr.success
            td #{regles.producteurs[i].ip}
            td #{regles.producteurs[i].port}
            td #{regles.producteurs[i].ressource}
            td #{regles.producteurs[i].quantite}
            td #{regles.producteurs[i].quantite_produite}
        else
          tr.danger
            td #{regles.producteurs[i].ip}
            td #{regles.producteurs[i].port}
            td /
            td /
            td /

        - i = i + 1
