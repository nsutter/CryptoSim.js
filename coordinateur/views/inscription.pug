extends layout

block content

  if regles.dateFin
    h1 Tableau des scores
      | &nbsp;
    span.glyphicon.glyphicon-time
    | &nbsp;Date de début : #{regles.dateDebut}
    br
    span.glyphicon.glyphicon-time
    | &nbsp;Date de fin : #{regles.dateFin}
  else if regles.dateDebut
    meta(http-equiv='refresh', content='0.5')
    h1 En cours d'exécution...
      | &nbsp;
      a.btn.btn-info(href='/stop') Arrêter la partie
    span.glyphicon.glyphicon-time
    | &nbsp;Date de début : #{regles.dateDebut}
  else
    meta(http-equiv='refresh', content='0.5')
    h1 Préparation du jeu 2/2 - Inscription des agents
      | &nbsp;
      a.btn.btn-info(href='/annulation') Revenir au paramétrage des règles et des agents

  if nJoueurs == 0 && nProducteurs == 0
    - var num=1
    while num <= regles.joueurs.length
      div(id= "c" + num, style="width: 800px; height: 400px;")
      - num = num +1
    script.
      var dt= !{JSON.stringify(data)};
      var dataGraph;
      var i=0, k=0, l=0;
      var tab;
      var tab2;
      for(k=0; k<dt.length;)
      {
        l= l+1;
        tab=[];
        tab2= [];
        dataGraph= [];
        var next= dt[k].joueur;
        var current= dt[k].joueur;
        i=0;
        while(k<dt.length && next == current)
        {
          current= dt[k].joueur;
          tab.push(dt[k].date);
          for(var j=0; j<dt[k].ressources.length; j++)
          {
            tab2.push([]);
            tab2[j][i] = (dt[k].ressources[j]);
          }
          i= i+1;
          k= k+1;
          if(i < dt.length)
            next= dt[i].joueur;
        }
        for(j=0; j<dt[0].ressources.length; j++)
        {
          var trace1 = {
            x: tab,
            y: tab2[j],
            type: 'scatter'
          };
          dataGraph.push(trace1);
        }
        Plotly.newPlot('c'+l, dataGraph);
      }

  if nJoueurs != 0 || nProducteurs != 0
    h2 #{nJoueurs} joueur(s) en attente
    table.table.table-bordered
      tr
        th Adresse IP
        th Port
        th Stratégie
      - var i = 0
      while i < regles.joueurs.length
        if regles.joueurs[i].inscription
          tr.success
            td #{regles.joueurs[i].ip}
            td #{regles.joueurs[i].port}
            td #{regles.joueurs[i].strategie}
        else
          tr.danger
            td #{regles.joueurs[i].ip}
            td #{regles.joueurs[i].port}
            td /

        - i = i + 1

    h2 #{nProducteurs} producteur(s) en attente
    table.table.table-bordered
      tr
        th Adresse IP
        th Port
        th Ressource
        th Quantité initiale
        th Quantité produite
      - var i = 0
      while i < regles.producteurs.length
        if regles.producteurs[i].inscription
          tr.success
            td #{regles.producteurs[i].ip}
            td #{regles.producteurs[i].port}
            td #{regles.producteurs[i].ressource}
            td #{regles.producteurs[i].quantite}
            td #{regles.producteurs[i].quantite_produite}
        else
          tr.danger
            td #{regles.producteurs[i].ip}
            td #{regles.producteurs[i].port}
            td /
            td /
            td /

        - i = i + 1
